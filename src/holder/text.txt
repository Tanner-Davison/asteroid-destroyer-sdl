      std::vector<size_t> asteroidsToRemove;
      for (auto &asteroid : asteroids) {
        SDL_Rect asteroidRect = {asteroid.getRectX(), asteroid.getRectY(),
                                 asteroid.getRectWidth(),
                                 asteroid.getRectHeight()};
        bool asteroidHit = false;
        //check players bullet
        for (auto &player : players) {
          auto bulletIndex =
              player->getWeapon().checkBulletCollision(asteroidRect);
          if (bulletIndex.has_value()) {
            printf("Bullet %zu hit asteroid at position: %d, %d\n",
                   bulletIndex.value(), asteroid.getRectX(),
                   asteroid.getRectY());
            player->getWeapon().destroyBullet(bulletIndex.value());
            asteroid.destroy();
            // update score
            scoreDisplay.setScore(100);
            break;
          }
        }
        if (asteroidHit)
          break;
      }
      // mark for removal
      for (size_t i = 0; i < asteroids.size(); i++) {
        if (asteroids[i].isDestroyed()) {
          asteroidsToRemove.push_back(i);
        }
      }

      // Remove from back to front to maintain valid indices
      for (auto it = asteroidsToRemove.rbegin(); it != asteroidsToRemove.rend();
           ++it) {
        if (*it < asteroids.size()) { // Safety check
          asteroids.erase(asteroids.begin() + *it);
        }
      }

