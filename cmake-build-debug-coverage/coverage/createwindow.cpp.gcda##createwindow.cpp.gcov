        -:    0:Source:E:/source/repos/sdl-first-game/src/createwindow.cpp
        -:    0:Graph:E:\source\repos\sdl-first-game\cmake-build-debug-coverage\CMakeFiles\sdl-first-game.dir\src\createwindow.cpp.gcno
        -:    0:Data:E:\source\repos\sdl-first-game\cmake-build-debug-coverage\CMakeFiles\sdl-first-game.dir\src\createwindow.cpp.gcda
        -:    0:Runs:1
        -:    1:// creatingwindow.cpp
        -:    2:#include "createwindow.hpp"
        -:    3:#include "SDL_render.h"
        -:    4:#include "SDL_video.h"
        -:    5:#include <SDL2/SDL.h>
        -:    6:#include <SDL2/SDL_image.h>
        -:    7:#include <SDL2/SDL_ttf.h>
        -:    8:#include <stdio.h>
        -:    9:#ifdef _WIN32
        -:   10:#include <direct.h>
        -:   11:#define CREATE_DIR(dir) _mkdir(dir)
        -:   12:#else
        -:   13:#include <sys/stat.h>
        -:   14:#define CREATE_DIR(dir) mkdir(dir, 0777)
        -:   15:#endif
        -:   16:// Define constants
        -:   17:const int SCREEN_WIDTH = 1900;
        -:   18:const int SCREEN_HEIGHT = 1200;
        -:   19:
        -:   20:// Define global variables
        -:   21:SDL_Window *gWindow = NULL;
        -:   22:SDL_Surface *gScreenSurface = NULL;
        -:   23:SDL_Surface *gHelloWorld = NULL;
        -:   24:SDL_Renderer *gRenderer = NULL;
        -:   25:TTF_Font *font = nullptr;
        -:   26:std::random_device GameRNG::rd;
        -:   27:std::mt19937 GameRNG::gen(GameRNG::rd());
        -:   28:
function _Z4initv called 1 returned 100% blocks executed 42%
        1:   29:bool init() {
        -:   30:  // Initialization flag
        1:   31:  bool success = true;
        -:   32:  // Initialize SDL
        1:   33:  if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        1:   33-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:   34:    printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
    %%%%%:   34-block  0
call    0 never executed
call    1 never executed
    #####:   35:    success = false;
        -:   36:  }
        -:   37:  // initializer for Fonts
        1:   38:  if (TTF_Init() == -1) {
        1:   38-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:   39:    printf("SDL_ttf could not initialize! SDL_ttf Error: %s\n", TTF_GetError());
    %%%%%:   39-block  0
call    0 never executed
call    1 never executed
    #####:   40:    success = false;
        -:   41:  }
        -:   42:  // initializer for TTF_OpenFont
        1:   43:  font = TTF_OpenFont("assets/fonts/FiraCode-Regular.ttf", 24);
        1:   43-block  0
call    0 returned 1
        1:   44:  if (!font) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   45:    printf("Failed to Load font! SDL_ttf Error: %s\n", TTF_GetError());
        1:   45-block  0
call    0 returned 1
call    1 returned 1
        1:   46:    success = false; // You probably want to set success to false here
        -:   47:  }
        -:   48:  // Initialize SDL_image
        1:   49:  int imgFlags = IMG_INIT_PNG;
        1:   50:  if (!(IMG_Init(imgFlags) & imgFlags)) {
        1:   50-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:   51:    printf("SDL_image could not initialize! SDL_image Error: %s\n",
    %%%%%:   51-block  0
call    0 never executed
call    1 never executed
        -:   52:           IMG_GetError());
    #####:   53:    success = false;
        -:   54:  }
        -:   55:
        1:   56:  if (success) {
        1:   56-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   57:    gWindow = SDL_CreateWindow("Tanners game", SDL_WINDOWPOS_UNDEFINED,
    %%%%%:   57-block  0
call    0 never executed
        -:   58:                               SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH,
        -:   59:                               SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    #####:   60:    if (gWindow == NULL) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   61:      printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
    %%%%%:   61-block  0
call    0 never executed
call    1 never executed
    #####:   62:      success = false;
        -:   63:    } else {
    #####:   64:      gRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED);
    %%%%%:   64-block  0
call    0 never executed
    #####:   65:      if (gRenderer == NULL) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   66:        printf("Renderer could not be created! SDL Error: %s\n",
    %%%%%:   66-block  0
call    0 never executed
call    1 never executed
        -:   67:               SDL_GetError());
    #####:   68:        success = false;
        -:   69:      }
        -:   70:    }
        -:   71:  }
        -:   72:
        1:   73:  return success;
        1:   73-block  0
        -:   74:}
function _Z9loadMediaPKc called 0 returned 0% blocks executed 0%
    #####:   75:bool loadMedia(const char *path) {
    #####:   76:  bool success = true;
        -:   77:
        -:   78:  // Load image using SDL_image instead of SDL_LoadBMP
    #####:   79:  SDL_Surface *loadedSurface = IMG_Load(path);
    %%%%%:   79-block  0
call    0 never executed
    #####:   80:  if (loadedSurface == NULL) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   81:    printf("Unable to load image %s! SDL_image Error: %s\n", path,
    %%%%%:   81-block  0
call    0 never executed
call    1 never executed
        -:   82:           IMG_GetError());
    #####:   83:    success = false;
        -:   84:  } else {
        -:   85:    SDL_Texture *newTexture = // Texture
    #####:   86:        SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
    %%%%%:   86-block  0
call    0 never executed
    #####:   87:    if (newTexture == NULL) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   88:      printf("Unable to create texture from %s! SDL Error: %s\n", path,
    %%%%%:   88-block  0
call    0 never executed
call    1 never executed
        -:   89:             SDL_GetError());
    #####:   90:      success = false;
        -:   91:    }
        -:   92:    // free surface bro
    #####:   93:    SDL_FreeSurface(loadedSurface);
    %%%%%:   93-block  0
call    0 never executed
        -:   94:  }
        -:   95:
    #####:   96:  return success;
    %%%%%:   96-block  0
        -:   97:}
function _Z5closev called 0 returned 0% blocks executed 0%
    #####:   98:void close() {
        -:   99:  // Deallocate surface
    #####:  100:  SDL_FreeSurface(gHelloWorld);
    %%%%%:  100-block  0
call    0 never executed
    #####:  101:  gHelloWorld = NULL;
        -:  102:
        -:  103:  // Destroy Renderer
    #####:  104:  SDL_DestroyRenderer(gRenderer);
call    0 never executed
    #####:  105:  gRenderer = NULL;
        -:  106:  // TTF (font Cleanup)
    #####:  107:  TTF_CloseFont(font);
call    0 never executed
    #####:  108:  TTF_Quit();
call    0 never executed
        -:  109:  /*
        -:  110:   Destroy Window-
        -:  111:    this is destroyed using SDLs system since SDL's memory is handled in 'C'
        -:  112:    calling destroy would throw an error
        -:  113:    */
    #####:  114:  SDL_DestroyWindow(gWindow);
call    0 never executed
    #####:  115:  gWindow = NULL;
        -:  116:
        -:  117:  // Quit SDL subsystems
    #####:  118:  IMG_Quit();
call    0 never executed
    #####:  119:  SDL_Quit();
call    0 never executed
    #####:  120:}
